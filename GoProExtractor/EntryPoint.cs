using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using static GoProExtractor.DataOutPut;
using static GoProExtractor.Decode;
using static GoProExtractor.Definitions;

namespace GoProExtractor
{
    public class EntryPoint
    {
        private MainWindow MainWindow { get; set; }

        /// <summary>
        /// Constructor
        /// </summary>
        public EntryPoint(MainWindow mainWindow)
        {
            MainWindow = mainWindow;
        }

        public void ProbeMp4(Settings stg)
        {
            using (Process process = new Process())
            {
                process.StartInfo.FileName = stg.FFProbePath;
                process.StartInfo.Arguments = stg.Mp4Path;
                process.StartInfo.UseShellExecute = false;
                process.StartInfo.RedirectStandardOutput = true;
                process.StartInfo.RedirectStandardError = true;
                process.StartInfo.CreateNoWindow = true;
                process.Start();
                // Synchronously read the standard output of the spawned process.
                StreamReader reader = process.StandardOutput;
                StreamReader reader2 = process.StandardError;
                string output = reader.ReadToEnd();
                string output2 = reader2.ReadToEnd();
                // Write the redirected output to this application's window.
                process.WaitForExit();
                MainWindow.Tb_Msg.Text = output + output2;
            }
        }


        public void Extract(Settings stg)
        {
            File.Delete("tmp.bin");
            using (Process process = new Process())
            {
                process.StartInfo.FileName = stg.FFMpegPath;
                process.StartInfo.Arguments = "-y -i " + stg.Mp4Path + " -codec copy -map " + stg.TargetStream + " -f rawvideo tmp.bin";
                process.StartInfo.UseShellExecute = false;
                process.StartInfo.RedirectStandardOutput = true;
                process.StartInfo.RedirectStandardError = true;
                process.StartInfo.CreateNoWindow = true;
                process.Start();
                // Synchronously read the standard output of the spawned process.
                StreamReader reader = process.StandardOutput;
                StreamReader reader2 = process.StandardError;
                string output = reader.ReadToEnd();
                string output2 = reader2.ReadToEnd();
                // Write the redirected output to this application's window.
                process.WaitForExit();
                MainWindow.Tb_Msg.Text = output + output2;                
            }

            // ffmpegの出力が無いとき
            if (!File.Exists("tmp.bin"))
            {
                MainWindow.Tb_Msg.AppendText("\n\n[Failed] \"tmp.bin\" not generated by ffmpeg.exe. ABORT!!\n");
                return;
            }

            byte[] tmp = File.ReadAllBytes("tmp.bin");
            List<GpsInfo> gpsInfos = new();

            // Stream #0:3の内容をfourCC: "DEVC" 毎にlist化
            List<byte[]> Devcs = SplitToDEVC(tmp);
            // DEVCからGPS情報を取り出す
            foreach (var d in Devcs)
            {
                GpsInfo gps = GetGpsInfo(d);
                gpsInfos.Add(gps);
            }
            MainWindow.Tb_Msg.Text = "";
            // GPX生成，書き出し
            if (stg.OutputGpx)
            {
                List<string> gpx = new();
                int count = GetGPX(gpx, gpsInfos, stg.GpsInterval, stg.GpsFixFlag, stg.GpsDopThreshold);
                File.WriteAllLines(stg.GetGpxFileName(), gpx);
                MainWindow.Tb_Msg.AppendText($"\n[Success] {count} points written in \"{Path.GetFileName(stg.GetGpxFileName())}\"\n");
            }

            // KML生成，書き出し
            if (stg.OutputKml)
            {
                List<string> kml = new();
                int count = GetKML(kml, gpsInfos, stg.GpsInterval, stg.GpsFixFlag, stg.GpsDopThreshold);
                File.WriteAllLines(stg.GetKmlFileName(), kml);
                MainWindow.Tb_Msg.AppendText($"\n[Success] {count} points written in \"{Path.GetFileName(stg.GetKmlFileName())}\"\n");
            }

        }

    }
}
